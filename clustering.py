import numpy as np
import math

sampledata = np.array([
    [1, 1.2],
    [-1, 2],
    [1, 1],
    [-1, 1.5],
    [-1, 1.8],
    [-0.8, 1.7],
    [-0.8, 1.9],
    [-0.85, 1.85],
    [-0.9, 1.6],
    [0.75, 1.1],
    [0.8, 1.15],
    [0.25, 1.8],
    [0.3, 1.7],
    [0.4, 1.85],
    [0.25, 2],
    [0.5, 1.6],
    [-0.5, 1],
    [-0.5, 1.1],
    [-0.3, 1.2],
    [-0.45, 1.15],
    [-0.1, 1.3]
])

dataset = np.array([
   [3, 3, 4, 3, 4, 4, 3],
    [3, 3, 2, 2, 3, 3, 3],
    [3, 2, 2, 3, 2, 3, 3],
    [4, 1, 3, 3, 2, 4, 3],
    [2, 2, 2, 2, 3, 3, 3],
    [3, 1, 3, 2, 2, 2, 3],
    [3, 2, 3, 1, 2, 3, 2],
    [2, 2, 2, 2, 2, 3, 2],
    [3, 2, 2, 2, 2, 2, 3],
    [2, 3, 2, 2, 2, 3, 2],
    [3, 3, 2, 2, 2, 2, 2],
    [3, 2, 2, 2, 1, 3, 2],
    [3, 1, 2, 1, 1, 3, 3],
    [2, 2, 3, 2, 1, 3, 3],
    [2, 3, 3, 3, 1, 1, 3],
    [2, 1, 2, 3, 1, 2, 2],
    [3, 2, 1, 2, 1, 1, 2],
    [2, 3, 2, 2, 1, 2, 3],
    [3, 3, 2, 3, 2, 1, 2],
    [4, 2, 2, 2, 1, 1, 3],
    [1, 1, 1, 1, 1, 1, 2],
    [2, 2, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 1, 1, 1, 2, 1, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 3, 1, 1, 1, 1, 2],
    [2, 3, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 2, 1, 1, 2, 2, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 2, 1, 2, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 2, 1, 1, 2, 2, 2],
    [2, 2, 1, 1, 2, 1, 1],
    [1, 3, 1, 1, 1, 1, 2],
    [2, 2, 1, 1, 1, 2, 2],
    [1, 2, 1, 2, 1, 1, 2],
    [2, 1, 1, 2, 1, 2, 1],
    [2, 1, 1, 1, 1, 1, 2],
    [1, 2, 1, 1, 1, 1, 1],
    [2, 1, 1, 1, 1, 2, 2],
    [2, 2, 1, 1, 1, 1, 1],
    [2, 2, 1, 1, 3, 1, 1],
    [1, 1, 1, 2, 1, 2, 2],
    [2, 2, 1, 2, 1, 2, 1],
    [1, 1, 1, 2, 1, 1, 3],
    [1, 2, 1, 1, 2, 2, 1],
    [1, 1, 1, 1, 1, 1, 2],
    [2, 2, 1, 2, 1, 1, 1],
    [2, 1, 1, 1, 1, 2, 1],
    [1, 1, 1, 2, 2, 1, 2],
    [1, 3, 1, 1, 1, 2, 2],
    [1, 2, 1, 2, 1, 1, 2],
    [1, 1, 1, 1, 1, 3, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 1, 1, 1, 1, 1, 1],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 2, 1, 2, 1, 3, 1],
    [1, 2, 1, 1, 1, 1, 2],
    [2, 2, 1, 2, 1, 2, 1],
    [1, 1, 1, 2, 1, 1, 2],
    [1, 2, 1, 1, 1, 2, 2],
    [2, 1, 2, 1, 1, 1, 2],
    [2, 1, 2, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 2, 1],
    [1, 2, 1, 2, 1, 1, 2],
    [1, 1, 1, 1, 1, 3, 2],
    [1, 2, 1, 1, 1, 1, 2],
    [1, 1, 1, 2, 2, 1, 2],
    [1, 1, 1, 1, 2, 3, 1],
    [1, 1, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 2, 1, 1, 1, 1, 1],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 2, 1, 2, 1, 2, 1],
    [1, 2, 1, 2, 2, 1, 2],
    [1, 1, 1, 1, 1, 1, 2],
    [1, 1, 1, 1, 1, 4, 1],
    [1, 1, 1, 1, 1, 3, 2],
    [2, 2, 1, 1, 1, 1, 2],
    [2, 1, 1, 2, 2, 1, 1],
    [1, 2, 1, 1, 2, 2, 2],
    [1, 2, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 2, 2, 1],
    [1, 1, 1, 2, 2, 1, 2],
    [1, 2, 1, 2, 1, 1, 2],
    [1, 1, 1, 2, 2, 2, 1],
    [2, 2, 1, 1, 1, 1, 2],
    [1, 2, 1, 2, 1, 2, 2],
    [2, 2, 1, 2, 1, 2, 1],
    [1, 1, 1, 2, 2, 1, 2],
    [1, 1, 1, 2, 2, 2, 2],
    [1, 2, 1, 2, 1, 1, 1],
    [2, 1, 1, 1, 2, 1, 2],
    [1, 1, 1, 2, 1, 1, 2],
    [2, 2, 1, 1, 1, 2, 1],
    [1, 2, 1, 2, 1, 2, 2],
    [2, 1, 1, 1, 2, 1, 2],
    [1, 2, 1, 1, 1, 2, 2],
    [1, 1, 1, 2, 1, 1, 1],
    [2, 3, 1, 1, 1, 1, 2],
    [1, 1, 1, 1, 2, 2, 2],
    [2, 1, 1, 1, 2, 2, 1],
    [1, 2, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 2, 1, 1, 2, 1, 1],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 1, 1, 1, 2, 1, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 2, 1, 2, 1, 1, 1],
    [2, 1, 1, 2, 1, 1, 2],
    [1, 1, 1, 2, 2, 1, 1],
    [2, 2, 1, 1, 2, 2, 1],
    [1, 2, 1, 1, 1, 1, 2],
    [2, 1, 1, 2, 1, 2, 1],
    [1, 1, 1, 1, 1, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [2, 1, 1, 2, 1, 1, 2],
    [1, 1, 1, 1, 1, 2, 2],
    [2, 1, 1, 2, 2, 1, 1],
    [1, 2, 1, 2, 1, 2, 2],
    [1, 1, 1, 2, 1, 2, 1],
    [1, 2, 2, 1, 1, 1, 2],
    [1, 1, 1, 1, 2, 2, 2],
    [1, 1, 1, 2, 1, 1, 2],
    [2, 1, 1, 1, 2, 2, 1],
    [1, 1, 1, 2, 1, 1, 2],
    [2, 1, 1, 1, 2, 2, 1],
    [1, 1, 1, 2, 1, 1, 2],
    [1, 1, 1, 2, 2, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 1, 1, 1, 1, 1, 2],
    [1, 1, 1, 2, 2, 1, 2],
    [2, 1, 1, 1, 1, 2, 2],
    [1, 1, 1, 2, 2, 1, 2],
    [1, 1, 1, 2, 1, 2, 2],
    [1, 1, 1, 2, 2, 1, 2],
    [2, 2, 1, 2, 1, 2, 1],
    [1, 1, 1, 1, 2, 1, 2],
    [1, 1, 1, 1, 1, 2, 2],
    [2, 1, 1, 1, 1, 3, 1]
])

def centroidAwal(data, jumlah_cluster):
    temp = []
    for i in range(jumlah_cluster):
        rand = np.random.randint(len(data))
        
        while (temp.count(rand) > 0):
            rand = np.random.randint(len(data))
            
        temp.append(rand)
            
    return data[temp,:]

def euclidean(a, b):
    sigma = 0
    
    for i in range(len(a)):
        sigma += (a[i] - b[i]) ** 2
        
    return math.sqrt(sigma)

def manhattan(a, b):
    sigma = 0

    for i in range(len(a)):
        sigma += abs(a[i] - b[i])

    return sigma

def minkowsky(a, b, p = 2):
    sigma = 0

    for i in range(len(a)):
        sigma += (abs(a[i] - b[i]) ** p)
        
    return (sigma ** (1/p))

def clustering(centroid, data, distance = 'euclidean'):
    # list untuk menyimpan cluster baru dari data yang dihitung
    cluster_baru = []
    for i in data:
        # menyimpan hasil distance dari data tertentu terhadap semua centroid
        hasil_per_centroid = []
        # menghitung distance dari setiap centroid
        for k in centroid:
            if distance == 'euclidean':
                hasil_per_centroid.append(euclidean(i, k))
            elif distance == 'manhattan':
                hasil_per_centroid.append(manhattan(i, k))
            elif distance == 'minkowsky':
                hasil_per_centroid.append(minkowsky(i, k))               
        
        cluster_baru.append(hasil_per_centroid.index(min(hasil_per_centroid)))

    return cluster_baru


def cari_centroid_baru(data, cluster, jumlah_cluster):
    dictionary = []
    # untuk menyimpan centroid baru
    centroids = []
    
    for i in range(jumlah_cluster):
        dictionary.append([])
    
    for i in range(len(data)):
        dictionary[cluster[i]].append(data[i])
        
#     for i in range(len(dictionary)):
#         centroids.append(np.array(dictionary[i]).mean(0))

    for i in range(len(dictionary)):
        centroids.append(np.median(dictionary[i], axis=0))
      
    return np.array(centroids)
